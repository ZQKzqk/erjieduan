正则表达式（规则表达式）
 是一个复杂数据类型
 按照指定符号，自己书写一个‘规则’
 用你自己书写的规则去验证字符串  是不是符合规则
 可以从一整段字符内单独拿出符合你规则的一部分字符串片段
 
正则表达式的创建 
 1 字面量创建
    var reg=/abcd/
 2 内置构造函数的创建 
    var reg= new RegExp（‘abcd’）

两种创建的区别

拼接字符串
  字面量不可以拼接字符串

  内置构造函数可以拼接字符串
          因为内置构造函数方式创建的正则需要以字符串的行式创建
表示符的书写
  字面量方式 直接书写到正则表达式的最后

  内置构造函数在第二个参数的位置以字符串的形式传入

书写基础元字符
  字面量方式直接书写基本元字符
  内置构造函数书写两个斜线





正则表达式的常用方法

1 匹配
    语法：正则.test(字符串)
    返回值是一个布尔值
    true表示字符串符合正则的规则
    false表示字符串不符合正则的规则
2 捕获
    语法:正则：exec（字符串）
    作用 从完整字符串中捕获出符合正则要求的一部分
    返回值
      1 原始字符串中没有符合要去的字符串就是null
      
       2 没有 小括号, 没有 全局标识符 g
              => 返回值是一个数组
              => 数组内 [0] 是你捕获出来的内容
              => 不管你捕获多少回, 都是从 [0] 位置开始检索, 找到一个符合要求的就返回

       有全局标识符 g
              => 返回值是一个数组
              => 数组内 [0] 是你捕获出来的内容
              => 当你第二次捕获的时候, 会从上一次的结束位置开                  始检索
              => 直到找到一个符合要求的片段为止
              => 当你第三次捕获的时候, 会从第二次的结束位置开                   始检索
              => 以此类推, 直到再也找不到了, 那么返回一个                   null
              => 再下一次检索的时候, 从 [0] 开始进行检索
            2-3. 有 小括号
              => 返回值是一个数组
              => 数组内 [0] 是你捕获出来的整体内容
              => 从 [1] 开始依次是每一个 小括号 内的单独



正式表达式 是有 文本 符号来组成
  
符号包括  元字符 和 表示符

元字符
1  \d   表示一位数字
 
2  \D    表示一位非数字

3  \s   表示一位空白

4  \S   表示 一位非空白

5  \w   表示一位数字（0-9）（a-zA-Z）―

6  \W    表示一位非数字下划线任意一位

7  \.    表示一位非换行

8  \      转义符


元子符  基础限定符


1 *    表示出现0-多次

2 +    表示出现1-多次

3 ？   表示出现0-1多次


元子符    边界符

1  ^     表示开头

2  $     表示结尾 




元字符   次数限定符

1 {n}
   表示指定 n次

2 {n，}
    表示n-多次   

3 {n，m}
     表示n-m次 



元字符  特殊符号

1 （）
    表示一个整体
    单独捕获
     会在捕获的时候 单独捕获小括号里的内容

2  |

    表示一个内容或者另一个内容  一般和（）连用 也可以不连用

3  【】
     表示包含
     一个【】占一个字符位置
     表示里面的一个内容都可以

4  【^】
      表示不包含
      一个【^】占一个字符位置
      表示里面任意一个都不行



5   -
     表示至或者到
     都是和【】在一起使用



标示符
  书写在正则的最后
  对正则表达的修饰


1 i  (ignore) 忽略

   表示忽略大小不计

2 g   (global) 全局

    会在捕获的时候在第二次捕获的时候会从第一次结束的时候开始捕获




   字符串和正则合作
replace
  语法
    字符串.replace(正则，替换成片段)
     如果有全局表示g 有多少换多少



search
   语法  
     字符串.search(正则)
       从正则的地方开始索引  没有是-1

 


match 
    语法
      字符串.match(正则)
      返回值: 和 exec 一样
          1. 当你的参数传递一个字符串的时候, 和 正则 方法            exec 返回值一模一样
          2. 当你的参数传递一个正则时候, 没有全局标识符 g 的             时候, 和 正则 的 exec 返回值一模一样
          3. 当你的参数传递一个正则时候, 有全局标识符 g 的时           候
            => 是一个数组, 里面包含所有字符串内符合正则要求的              片段



验证邮箱
var reg = /^[0-9a-z]\w{5,11}@(qq|163)\.(com|cn)$/










