this指向

  声明式调用时window
  构造函数调用是自己

强行改变this指向
call 
  函数名.call()
   会立即调用函数
   第一个参数是this的指向
   第二个参数开始：依次给函数的实参

apply（）
   函数名.apply()
    会立即调用函数
    第一个参数是this的指向
    第二个参数 是一个伪数组 和数组都行里面的每一项依次传递

bind（）
    函数.bind()
     不会立即调用函数
     第一个参数是this指向 从第二个参数开始依次给函数赋值

      是返回值  复制了一个和函数一样的新函数 
    
    只是this是指定好的



自执行函数
 

（function（）{}（））  

 ~function（）{}（）

 ！function（）{}（）


三个只是语法不一样 别的没区别
   为了产生一个独立作用域

自执行函数的this指向是window


ES6


使用es6 定义不在是var
  

let和const定义变量

const又叫做常量



let和const
  不会被预解析

  不允许声明重复变量

  有块级作用域



let和const的区别

1 重新复制
  let生命的变量可以被修改
  const的常量不允许被修改

2 声明问题
  let生命的时候可以不进行赋值
  const声明的时候必须直接赋值之后不允许修改






箭头函数
  （）=>{}

  除了声明式函数  别的都可以用

   箭头函数里没有this
   
      1. 只能取代函数表达式
        => 对于声明式函数没有效果
      2. 如果你的箭头函数只有一个形参
        => 那么可以省略小括号不写
        => 没有形参或者两个及以上形参, 小括号必须写
      3. 如果你的箭头函数只有一句话
        => 可以省略 大括号 不写
        => 并且不能写 retrun 关键字, 因为箭头函数会自动把这一           句话的结果当做返回值
      4. 箭头函数内没有 arguments
        => 根本没有这个内容
        => 你在箭头函数内拿不到所有实参的集合
      5. 箭头函数内没有 this
        => 官方: 箭头函数内的 this 就是其外部作用域的 this
        => 私人: 定义箭头函数的上一行 this 是谁, 箭头函数里面         this 就是谁



ES6的函数参数默认值
        => 给函数的形参设置一个默认值
        => 当你没有传递实参的时候, 就使用默认值
        => 如果你传递了实参, 就使用你传递的实参
        => 语法: 在函数参数位置, 直接给形参
          -> function fn(a = 10) {}
          -> var fn = function (b = 20) { }
          -> var f = (c = 30) => {}
        => 注意:
          1. 箭头函数也可以设置参数默认值
          2. 箭头函数如果设置了参数默认值, 不管多少个形参都得           书写小括号
  


ES6的模板字符串
      一种定义字符串是的方式
      使用``反引号来定义字符串
      定义出来的和不同字符串一样


模板字符串的特点
     可以书写换行
     可以直接写在字符串里解析变量
        
     当你需要解析变量的时候, 书写 ${ 变量 }
     是模板字符串语法的一部分, 表示这个位置需要填写变量了




ES6的解构赋值

  快速从对象或数组里获取一些成员

   
     使用 [] 解构数组
        语法: const [] = 数组
     左边的中括号内, 按照数组中的所以写你需要的变量**

   嵌套解构赋值
        => 从一个多维数组中获取数据
        => 在解构的时候, 数组怎么写, 解构就怎么写
        => 只不过把数据位置改变成变量名


   解构对象
        + 快速从对象中获取数据
        + 使用 {} 解构对象
        + 语法: var {} = 对象
        + 在 {} 内书写你想从对象内获取的成员名称

点点点运算符
        + 符号: ...
        + 作用:
          1. 展开
          2. 合并

 1. 展开
        => 展开数组
          -> 就相当于去掉 []
        => 展开对象
          -> 就相当于去掉 {}
        => **当你把这个符号书写在函数实参位置 或者 数组 或者         对象 内部的时候, 就是展开运算符**

  2. 合并
        => 合并数据为一个数组
          -> 相当于把一堆数据放在一个数组里面
          -> 箭头函数没有 arguments, 可以使用 合并运算 来自        己制作一个 arguments
        => **当你把这个符号书写在函数形参位置的时候, 就是合并         运算符**












