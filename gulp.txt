gulp
   
   一个自动化打包构建工具

   把我们的项目进行压缩转码混淆
   
   自动化程序
       自己执行这些事情
       需要按照你给出既定程序来执行
       告诉他把什么 文件夹下的什么文件按照什么规则打包


gulp 的工作
      gulp 工具运行需要node环境的
        
    gulp 工具的工作流程需要依赖 流 完成

gulp 工具的安装 
      
      npm i  -g gulp

      删除   npm un -g gulp
 
     检测 gulp -v



gulp 打包前的准备
 
  1 全局gulp
  
  2 准备已个文件夹 sdy
  
  3 在这个sdy这个跟目录里准备一个源文件价

  4 在这个文件夹内进行 npm 初始化 生成一个package。json

  5 在项目根目录里 直接书写一个gulpfile.js的文件

  6 需要安装一个项目内部打包依赖 一个内部的npm i gulp
   
  7 开始进行本项目的打包规则书写



  npm 的依赖

     项目依赖  npm i  包名  
             会保存在package.json 中的 depengcies 里面

     开发以来  npm i  -D 包名
            会存在package.json中的 devDependencies里




  npm依赖一次性下载
  
    上传时不需要node_mpdules文件
    
     只要输入npm i 就能把package。js文件所在目录




gulp 常用方法

    1 gulp.task()   
       语法  gulp.task（"任务名称"，函数）    
         创建一个打包任务 
        将来你在命令行 书写 gulp 任务名称的时候就会  
        执行 后面的函数
      
    2 gulp src（）
   
        语法 gulp.src（"路径"）
           找到你要打包的文件
           只是一个流

    3 pipe（）
      语法 pipe(继续写一个需要做的事情 )

    4 gulp.dest()
       语法gulp.dest('存放的路径')
       打包好的文件放的地址

    5 gulp。watch（）
        语法 gulp。watch（文件路径。任务名称）
         作用监控你指定的文件当他们发生改变时 触发后面内         容
     6 gulp.series()
        语法：gulp。serise（任务1 任务2 任务3）
           设置一个逐步执行的任务流函数
     7 gulp。parallel
         语法 gulp。parallel（任务一 任务2 。）
            设置一个并执行任务的任务流函数

 
配置打包css文件任务
   下载包  gulp-cssmin  压缩cs
   下载包  gulp-autoprefixer 自动兼容

       const cssHandler = function () {
  return gulp
    .src('./src/css/*.css')         // 1-2. 找到文件
    .pipe(autoprefixer())               // 添加前缀
    .pipe(cssmin()) // 1-3. 进行去空格的打包操作
    .pipe(gulp.dest('./dist/css/')) 放在指定目录下
}


配置一个打包 js 文件
   下载 gulp-uglify
    gulp-babel  转换成s6
     需要先下载@babel/core
              @babel/preset-env
       const jsHandler = function () {
  return gulp
    .src('./src/js/*.js') // 找到文件
    .pipe(babel({ presets: [ '@babel/preset-env' ]                     })) // 转换成 ES5 的语法
    .pipe(uglify()) // 执行压缩
    .pipe(gulp.dest('./dist/js/')) // 放到指定目录
            }



配置一个打包html文件
   下载 gulp-htmlmin
     const htmlHandler = function () {
  return gulp
    .src('./src/views/*.html') // 找到文件
    .pipe(htmlmin({
      collapseWhitespace: true, // 去除掉空格
      collapseBooleanAttributes: true, // 简写值为布          尔值的属性
      removeAttributeQuotes: true, // 去除属性上的双引              号
      removeEmptyAttributes: true, // 去除空属性
      removeStyleLinkTypeAttributes: true, // 移出               style 和 link 标签身上的 type 属性
      removeScriptTypeAttributes: true, // 移出             script 标签身上的 type 属性
      removeComments: true, // 移出注释
      minifyCSS: true, // 会把内嵌式的 css 样式压缩
      minifyJS: true, // 会把内嵌式的 js 代码压缩
    })) // 压缩 html 文件
    .pipe(gulp.dest('./dist/views/')) // 放到指定目录         下
}

    配置一个监控任务
const watchHandler = function () {
  gulp.watch('./src/views/*.html', htmlHandler)
  gulp.watch('./src/css/*.css', cssHandler)
  gulp.watch('./src/js/*.js', jsHandler)
                  }

  const delHandler = function () {
  return del([ './dist/' ])
        }

   配置一个删除的任务
const delHandler = function () {
  return del([ './dist/' ])
            }


   配置一个统一管理的任务
const defaultHandler = gulp.series(
  delHandler,
  gulp.parallel(cssHandler, sassHandler, jsHandler,        htmlHandler, imageHandler, audioHandler),
  webHandler,
  watchHandler
  )


    


        
     






























 
       

     
   
   