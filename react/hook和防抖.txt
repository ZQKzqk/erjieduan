hook
    函数的一些钩子



常用函数 
  
1  useState 
       保存组件状态 类似于 this。state 状态

  import React, { useState } from 'react'

  用法  值     修改值的函数        初始
  let [count, setCount] = useState(0)



2  useEffect
        模拟生命周期
   import React, { useState, useEffect } from 'react'

   useEffect(() => {
    
    }
      第二个参数是一个数组 里面是一个监听 已发生改变就出发这个函数


3  useReducer 
      和redux 几乎类似


4 useContext 
      先创建一个上下文对象createContext（）并导出，
     
      import cxt from '../context/userContext'
     const { Provider } = cxt

     子组件 
      import React, { useContext } from 'react'

      const context = useContext(cxt)


5 useMemo
   
     计算属性  性能优化用的
         import React, {useMemo } from 'react';
 
   也是一个函数 
       
          const sum = useMemo(() => {
        return count + 10
    }, [count])
    
    也是监听一个变量 变的话 就会触发这个函数
    

6 useCallback 
     
     记忆函数  计算返回一个缓存函数

    例  const callback = useCallback(() => {
       return count
     }, [count])
     
       例如给子组件传参数时可用

7 useRef
     import React, { useRef } from 'react'
    用法  
     const username = useRef()

     ref={username}

8 forwardRef  
      用ref是一个高级组件来控制子组件的值

    子有个参数 赋值为ref 
    cmp=    forwardRef(子组件)
     
     《cmp ref=‘阿萨德’》



9  useImperativeHandle
        穿透属性
     
   useImperativeHandle（‘ref’函数返回一个对象 ）


10  useLayoutEffect
       挂载之前用的函数 用于操作dom 比较好
    大部分情况下，使用 useEffect 就可以帮我们处理
    组件的副作用，但是如果想要同步调用一些副作用，
    比如对 DOM 的操作，就需要使用 
      useLayoutEffect，useLayoutEffect 中的副作用会在
     DOM 更新之后同步执行。
  


11 react-redux-hook

     


12 react-router-dom-hook




13 自定义hook








