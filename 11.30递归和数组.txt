递归函数 

    ！ 一种函数的应用方式
    
    ！ 当一个函数自己调用自己的时候  能逐层进去 还能回来 叫做递归函数
   
    ！ 注意递归终点 是一个直接给出结果的位置
  
    ！ 书写递归函数的方式 
        1 把一个事情拆开看  找到 规律
  
        2 进递归函数  先写 终止条件  
   
        3 怎么总结 规律  就怎么实现 
   
        4 不要忘记 return
    例  ：
递归求阶乘
     function fun（n）{

      if（n===1）{   终止条件：   当n等于1的时候 返回1
        return 1
    
        }
    return n*fun（n-1）    规律： 从最大乘到最小

          }

         var s=    fun（10）  收取返回值
      
         console。log（s）则是结果


斐波那挈数列
   例：
       function  fun（n）{
           
  if（n==1||n==2）{return 1}
     
   retur  fun(n-1)+fun(n-2)

         }

    var s=fun(20)
     console .log(s)



数组数据类型
  JS 中有一个数据类型  叫做  Arrty 
        数组是一个复杂的数据类型  
  是一个盒子 里面可以存储很多的数据  
     每个 数据都会有一个 “序号” 
      这个序号就是 所谓的  索引 或 下标
数组的创建 
   字面量创建 
      var arr=[]

 可以在创建的时候带有一些数据 这个数据写在[]里就可以了
    内置构造函数创建 
 
      var arr= new Array（）
   也可以在写的时候 带有一些  数据 
    写一个  表示  这个函数的 长度 也就是索引+1
      写多个 用逗号隔开  也是直接把数据写在里面


数组的length 属性
    
     例  arr.length 打印出来 就是这个数组的长度
      
      arr[arr.length]=值   这样就是给这个数组增加个值并且在最后
  
        如arr.length=10    表示这个长度为10 没数据则空

索引属性
   
    数组的  索引（下标） 是从 0 开始的
       例 arr[0]  表示  第一个数据

         arr[0]=12 如果有 就等于 重新赋值
       arr[100]=34  如果没有下标100 则会自动补齐

  
       
遍历  
   就是把数组从头到尾过一遍  拿到每一个值
   使用 for  循环   遍历


  例 ：
     var arr=new Array(10)

    for （i=0；i<arr.length; i++）{

        console.log(arr[i])

       }
  

用for  in 遍历  对象 
     var obj= new  Object（）
      var obj={
         name:"原始天尊"，
         ege：  1000000，
         height：200


      } 

    for（var a in obj）{

     console（obj。a  ）    a表示的是 obj的属性值
                              name，ege，height
      }
也可以用 for in  遍历 数组
   
     var arr =[1,2,3,4]
   
   for(var key in arr){
      console.log( arr[key])  key表示的是 arr的索引值
                                  0，1,2
    }                








































  
