Java Scrip
     html 标记语言
     JavaScript  编程语言 轻量级弱类型脚本语言 页面里面起到一个行为作用

JavaScript发展历史
     94年 网景公司发布了第一款比较成熟的浏览器 Navigator浏览器0.9版轰动全球
     只能浏览页面 当时2个办法  1 现有语言直接嵌入 2 发明一种全新的语言
     liveScript==>javaScript==>ECMAscript
   
     1995年sun公司将oak语言改名java 大肆宣传可以一次编写（wite once run
     anywhere）看上去很可能成为未来的主宰
 
     网景公司决定与sun公司合作
 
     34岁程序员Brendan Eich登场95年4月 用10天时间设计出javascript
   
     1借用c语言基本语法
     2借鉴java语言的数据类型和内存管理
     3借鉴scheme语言将函数提升到第一等公民 （first class）地位
     4借鉴self语言使用原型 （prototype）的继承机制

Java Script能干什么
     1常见网页效果（表单验证，轮播图。。。）
     2与h5配合实现游戏水果忍者
     3实现应用级别的程序   
     4实现统计效果  
     5地理定位等功能
     6在线学编程
     7可以实现人工智能
      等等。。。。。
JavaScript代码的书写位置
     和css一样js也有多种书写方式在页面上让其生效 
     1 行内式 2 内嵌式 3 外链式
 行内式不推荐
       写在标签上js代码要用依靠行为来触发
    例：<a href='javascript:alert(点击超链接可弹出）；”>点击<a>

       <div  onclick="alert(‘点击行为弹出’）<div>
    
          onclick  是一个点击事件  点击的时候执行什么什么之类的

 内嵌式的js代码会在页面打开时候直接触发
        可以放在任何地方   不建议放在body尾部
        可以写多个script标签  从上到下执行按顺序

 外链式js代码
      <script  scr="路径"> <script>
      可以引用多个    引用路径的script里面不能写js代码
JS中的注释 
    / / 要多用    
   


   


变量 
	变量指的是在程序中一个保存数据的容器
	是计算机中存储数据的标示符 根据变量名称可以获取内存中存的数据
	就是向计算机存储一个数据 然后给数据一个名字 用名字找到他
     语法    var 变量名 = 值

 
定义变量及赋值
	var a   定义一个变量
	
	a = 100   这叫赋值

	var a = 100   定义一个变量的情况下同时赋值

   注意：
	一个变量只能存储一个值
	
	再给同一个变量赋值时会覆盖上一个值

	变量名称区分大小写 （JS严格区分大小写） 

变量的命名规则和命名规范 
    
        1 只能是数字 字母 下划线_ &组成

	2 严格区分大小写

	3 不能有数字开头

	4 不能使保留字和关键字

	5 不要出现空格
   建议遵守（开发者默认)不遵守不会报错
      变量名尽量语义化
      遵守驼峰命名法多个单词的话首字母大写第一个不用
      不能用中文




数据类型（重点）
     1 是指我们存储的内存的数据的类型
     2 一般分为两大类  基本数据类型 和 复杂数据类型

    

 基本数据类型
	1 数值类型（number）
             *一切数字都是数值类型（包括二进制 十进制 十六进制 ）

             * NAN （not a number）一个非数字
	2 字符串（string）
	     * 被引号包括的所有内容 可以单引号也可以双引号 
	
	3 布尔值（boolean）
             *只有两个  true  和  false 
           
	4 null类型（null）
	     *只有一个 就是null 表示空的意思

        5 undefined类型（undefined）
	     *只有一个值  undefined 表示没有值得意思
  
复杂数据类型
     
     对象（object）
     函数（function）



判断数据类型
     
     要知道什么数据类型用typeof来检查
  


判断一个数字是不是数字
  可以使用 isNaN这个方法判断是不是一个非数字
       isNaN  全称 是 is not a number
           返回值只有    不是数字   true      是数字 false
         字符串的数字会改成数字 也是fales





数据类型转换
     数据类型之间的转换 比如数字类型转为字符串  字符串转成 布尔 布尔转数字
 

  
 1 number （变量）
     可以把一个变量强制转换数值类型
     可以转换小数 会保留小数
     可以转布尔值 
          0  和 NaN 转  fales
      别的都是true
     遇到不能转number的转成NaN
    
  2 parseint（变量）
     开头不是数字就直接返回NaN
      不认识小数点 只能保留整数
  3 parseFloat（变量）
       只认识一次小数点

  4 除加法以外的数学运算（加法不行）
   
     如果不是数字用了会返回NaN
       加法不能用

+
 
转成字符串
   1  变量名.tostring()
       有一些数据不能使用这种方法
         比如 underfined 和 null
   2 string（变量名）
      所有数据都行
   
   3 使用加法运算
       在JS中 + 有两种含义 
   
       字符串拼接：只要一边是字符串 则会变成字符串拼接
   
       只有出数字 用 +  才会是加法运算
 
转成布尔
  
  Boolean（变量名） 
             重点
      1 “”   空符串
      2   0    零
      3 null   null
      4 undefined  空值
      5 NaN   NaN 
         
      这些都是   false     别的都是true




赋值运算符 
    a+=10
       就是 a= a+10
      =  -=   *=  /=  +=    一个道理   

 

比较运算符 
 
    ==    比较两边的值是否相等  不管数据类型
            例：  1 == “1”

 
    ===    全等  啥都一样
    ！==    不全等

           

       ！= 比较两边的值是否不等
              1！=‘1’
            相等但不全等  所以楼上是  false



     >= 大于等于    <   小于
   
     <= 小于等于     >   大于
     

   

逻辑运算符    

       重要
   
    &&    且运算
      
       true &&false    值为false
     
    ||    或运算 
        
       true||false   值为true  

   
     ！  取反运算 
      
         ！true  值 false 



     （&&）且 优先级大于 （||）或

自增自减运算符
    a++   加之前
    ++a   加之后


    a--   减之前
    --a   减之后

    例   var a = 1
        b= a++ + ++a + --a  + a--   b的值是10   a现在是1


                  第二天
  
分支结构 
   
    逻辑分支就是根据我们设定好的条件来决定要不要执行某些代码


 IF 条件分支结构（重点） 

  if 语句
     通过一个if  语句决定代码执行与否

        语法  if（条件 ） {  执行的代码   }
  
     条件为true 则会执行   为false 则 不执行



  if else 语句
     语法  if（条件 ）{ 执行的代码  } else{执行的代码  }
             条件成立执行if后的代码  否则 执行 else 里的

  if else if。。语句
   
     语法  if（） {  }else if （） {  }else if（） {  }
               
              同道理从上而下 谁的条件成立执行谁后面的代码

  if else if 。。else语句
       
       都不满足条件   执行else 里的代码



SWITCH条件分支语句  （重点）

    对一个变量的判断
         语句  switch(变量名){
                 case “情况1”：
                     执行的代码
                    break；

                     case “ 情况2”：
                     执行的代码
                    break；
             
                default：
                    都不满足则会执行这个的代码
            }

  
  三元运算  
     

    例  max=   a > b ?   a: b

    例  3  > 4  ? alert("对的话执行这个")：alert（“不对执行这个”）
    
   
        第 三 天

循环结构 （重点）

  根据给出的条件 重复执行一段代码
   
   循环必须要有固定的内容组成
      1 初始化
      2 条件判断
      3 自身改变
      4 要执行的代码
 
 while 循环
     while 循环 中文  翻译  当  。。时   满足条件就执行
    


   语法  while （条件）{满足就执行}
      
        因满足就执行所以要设定一个边‘
界值 不然一值循环

          1 初始化条件  例  var a = 10
     
          2 条件判断         a<100
        
          3 要执行的代码      alert("一句重复的话")
    
          4 自身改变          a++


 do while 循环
   和while  的区别就是先执行一圈后再判断
            var a = 10

       例  do{alert （“条件不满足也会出来一次”）
                 a++   }while（a<10）


for   循环  （ 重点中的重点）

     语法    for(var a = 1； a<10 ;a++ ){
                          
                   
                console.log（执行10次）
                    }

     break :循环停止 

             例：for（i=1； i<10； i++  ）{
                   console.log(i)  这个写在if上面4会出来
                                     之后不再有
                   if（i=4）{
                       break；
                       }
                   }

     continue ：这次不循环 

               例：for（i=1； i<10；i++）{
                      console.log（i）这个写在哪里没所谓
                    if（i=5）{

                      continue；
                    }

                 }  
   
              第四天

函数 
     对于js 来说 函数是把任意一段代码放在盒子里
   
     想要用这段代码的时候就直接输入这个函数的名字就行

函数的两个阶段
   函数定义阶段
     定义阶段就是我们把代码放在盒子里
     两种方式 声明式 和 赋值式
   
     
声明式
   使用function 这个关键字来声明一个函数
 
   语法 function  fun(){
       一段代码     }

赋值式
   就是用一个变量来给这个函数命名
   语法 var a = function（）{
       已段代码     }


   函数调用阶段

      就是让盒子里的代码执行一下
    定义函数方式不同  但是调用方式一样

   
调用函数
   函数名后加个（）即可
    声明式函数和赋值式函数一样


区别 声明式函数可以在定义前调用    赋值式  不行


函数的参数（重点）

   （） 用来放参数的地方
          分为  形参  和 实参

  
  形参和实参的个数关系
      都是从左到右的   形参没值是  undefined
    
 
 
函数的return  （重点）

   return  就是返回的值得  意思
     
      function  fun（）{
    
         alert（“1”）
         alert（“2”）

         return；    这里也可以用来打断
         alert（“3”）
    }



     例  function fun（a ，b）{
            var c = a+b
             
             return c；
           }
   alert    （ fun（12,34））则会返回 c的值

函数的优点
  函数是对一段代码的封装 在我们想调用的时候调用
  
  函数的几个优点
   
     1 封装代码 使代码更加简介
   
     2 复用 在重复功能时直接调用就好
    
     3 代码执行时机  在我们想要调用的地方随时调用





      预解析      《《《《重点》》》》
   

   *  因为在所有代码执行之前进行解释，所以叫做预解析（预解释）
    
       
   *  需要解释的内容有两个 
        o 声明式函数
           在全局域里先声明一个变量名是函数名，并且这个名字代表的
           内容是一个函数
        o var 关键字
            在内存中先声明有一个变量名
   
       
        o 赋值式函数会按照 var 关键字进行预解析
              



                    第五天
 

作用域   
      作用域：就是一个变量可以生效的范围，分为
           全局作用域      私有作用域


       变量不是在所有地方都可以使用，而这个变量的适用范围就是作用域
   
   
全局作用域 
      
	全局作用域是最大的作用域 （一个页面就是一个全局作用域）

        在全局作用域中定义的变量可以在任何地方使用
 
        页面打开的时候 浏览器给我们呢生成了一个全局作用域

        这个作用域会一直存在 页面关闭就销毁


       var nam =100     全局下的 可以在任何地方使用！


局部作用域 
        
        局部作用域就是在全局作用域下面有开辟出啦一个相对小一些的作用域
    
        
         局部的变量只能给自己用
    

         只有函数才能生成局部作用域

    
         每一个函数都是一个局部作用于

变量使用规则
   
        有了作用域后  变量就有了使用范围 所以就有了使用规则

        变量使用规则分为  访问规则 和赋值规则

        变量的定义就是 必须要有  var 或  声明式函数


        给一个变量进行赋值操作 需要有等于号（=）

作用域给我们三个机制  ））））））重点（（（（（（
     
        1 变量定义机制
        2 变量使用机制
        3 变量赋值机制

 变量定义机制
      ！定义在哪一个作用域下的变量
      ！就是属于哪一个作用域的私有变量
      ！定义在全局的变量   我们叫做 全局变量
      ！只能在当前作用域和子级作用域使用
 

 变量使用机制
      ！当你在任何作用域内使用一个变量的时候先从自己作用域里查找
        有就直接用  没有就向上级查找  依次类推 
         直到全局里都没有 就报错  

        》》》》只能单方面向上查找，不能向下查找《《《《


变量赋值机制
      ！当你在任何一个作用域里想给一个变量赋值时 首先在自己的作用域
        查找  有就赋值  没有会上级的作用域里变量赋值 
        全局  也没有  会定义为全局变量   进行复制



访问规则
       》当我们想获取一个变量的值得时候 我们管这个叫做访问
   
获取变量的规则
       》在自己的作用域里查找 有直接用 没有就去上一级 依次类推


        var num = 100
      function fun（ ）{

         var num1=200
          console。log（num1）   获取变量自己有用自己
          console。log（num）      没有获取上级
          console。log（hah）        没有则会报错         
        }

       》变量的访问规则也叫做作用域的查找机制
       
       》作用域的查找机制只能向上找 不能向下找


赋值规则
      
       》当你想给一个变量赋值的时候 先找到再赋值

       》变量赋值规则
          @ 现在自己的作用域查找 有就直接赋值
          @ 没有就去上一级作用域内部查找  依次类推
            都没有会变成  全局变量  进行赋值

          function fun（）{
               num=100
          }
           console。log（num） 这个num就变成了全局的变量



















 
 






























 
